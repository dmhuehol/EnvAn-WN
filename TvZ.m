function [foundit] = TvZ(y,m,d,t,sounding)

[r,~] = size(sounding); %find the number of soundings
if r==1 %if it's oriented the other way
    [~,r] = size(sounding); %find it this way instead
end
check = fieldnames(sounding);
if isempty(nonzeros(ismember(check,'rhum'))) == 1 %check if the sounding has a relative humidity field, named rhum if generated by dewrelh or FWOKXh line
    for a = 1:r
        [sounding(a).dewpoint,sounding(a).relative_humidity] = dewrelh(sounding(a).temp,sounding(a).dew_point_dep); %call to dewrelh to add dewpoint and relative humidity, if necessary
    end
end

for as = 1:r %loop through everything
    datenum{as} = sounding(as).valid_date_num;
    if isequal(datenum{as},[y,m,d,t])==1 %look for the requested date
        foundit = as; %here it is!
        disp(foundit) %show it just in case there wasn't an output call
        break %don't loop longer than necessary
    else %do nothing
    end
end

if ~exist('foundit','var') %if the date doesn't have a corresponding entry in the sounding structure, foundit won't exist
    disp('No data available for this date!')
    return %stop the function from running
end

mb200 = find(sounding(foundit).pressure >= 20000); %find indices of readings where the pressure is greater than 20000 Pa
presheight = sounding(foundit).pressure(mb200); %select readings greater than 20000 Pa
presheightvector = presheight/100; %convert Pa to hPa (mb)

%first geopotential height entry should be straight from the data
if isnan(sounding(foundit).geopotential(1))==0
    geoheightvector(1) = sounding(foundit).geopotential(1)/1000;
    %disp('1 is good')
elseif isnan(sounding(foundit).geopotential(1))==1 && isnan(sounding(foundit).geopotential(2))==0
    geoheightvector(1) = sounding(foundit).geopotential(2)/1000;
    disp('2 is good')
    disp(foundit)
elseif isnan(sounding(foundit).geopotential(1))==1 && isnan(sounding(foundit).geopotential(2))==1 && isnan(sounding(foundit).geopotential(3))==0
    geoheightvector(1) = sounding(foundit).geopotential(3)/1000;
    disp('all the way to 3')
    disp(foundit)
else
    disp('This data is really bad! Wow!')
    disp(foundit)
end

geoheightvector = geoheightvector'; %transpose to match shape of others, important for polyxpoly

%define temp as the temperatures from the surface to 200 mb
prestemp = sounding(foundit).temp(mb200);
geotemp = sounding(foundit).temp(mb200);

R = 287.75; %dry air constant J/(kgK)
grav = 9.81; %gravity m/s^2

for z = 2:length(presheightvector')
    %geoheightvector(z) = 8*log(presheightvector(1)/presheightvector(z)); %calculate height data based on the pressure height; this prevents loss of warmnoses based on the sparse height readings available in the IGRA dataset
    geoheightvector(z) = (R/grav*(((geotemp(1)+273.15)+(geotemp(z)+273.15))/2)*log(presheightvector(1)/presheightvector(z)))/1000; %much more accurate equation to calculate geopotential height
end

%extra quality control to prevent jumps in the graphs
geoheightvector(geoheightvector<-150) = NaN;
geoheightvector(geoheightvector>100) = NaN;
presheightvector(presheightvector<0) = NaN;
prestemp(prestemp<-150) = NaN;
prestemp(prestemp>100) = NaN;
geotemp(geotemp<-150) = NaN;
geotemp(geotemp>100) = NaN;
sounding(foundit).rhum(sounding(foundit).rhum<0) = NaN;
sounding(foundit).dewpt(sounding(foundit).dewpt<-150) = NaN;
sounding(foundit).temp(sounding(foundit).temp<-150) = NaN;

%freezing lines for Tvz and TvP charts
freezingxg = 0:16;
freezingyg = ones(1,length(freezingxg)).*0;

%plotting
f9034 = figure(9034); %new figure
plot(geotemp,geoheightvector,freezingyg,freezingxg,'r') %Tvz
datenum = num2str(sounding(foundit).valid_date_num);
title(['Sounding for ' datenum])
xlabel('Temperature in C')
ylabel('Height in km')
ylim([0 13]);
hold off

% %relative humidity
% [LCL] = rhumplot(foundit,sounding);

end